
1、	查询学生性别和生日并且对列取别名：
select gender as 性别,birthday as 生日 from students;
 
2、某列消除重复行，例如查询性别：
 select distinct gender from students;
 
3、查询没被删除和删除的学生（分别两个sql语句）：
 select * from students where isdelete=0;
 
select * from students where isdelete=1;
 
4、查询编号大于3的女同学：
 select * from students where id>3 and gender=0;
 
5、查询编号小于4或没被删除的学生：
select * from students where id<4 or isdelete=0;
 
6、查询姓郭的学生：
 select * from students where name like '郭%';
 

7、查询姓黄并且名字是一个字的学生：
select * from students where name like '黄_';
 
8、查询姓黄或叫靖的学生：
 select * from students where name like '黄%' or name like '_靖';
 
9、查询编号是1或3或8的学生：
 	select * from students where id in (1,3,8);
  
10、查询学生编号是3至8的男生：
select * from students where id between 3 and 8
 
11、查询没有填写生日的学生：
 select * from students where birthday is null;
  
12、查询填写了生日的学生：
 select * from students where birthday is not null;
 
13、查询填写了生日的女生：
select * from students where birthday is not null and gender=0;
  

14、查询女生的编号最大值：
select max(id) from students where gender=0;
  
15、查询未删除的学生最小编号：
 select min(id) from students where isdelete=0;
  
16、查询已删除的学生最小编号：
 select min(id) from students where isdelete=1;
 
17、查询男生的编号之和：
 select sum(id) from students where gender=1;
 
18、查询未删除女生的编号平均值：
select avg(id) from students where gender=0;
  
19、一个语句统计男生和女生总人数：
select gender,count(*) from students group by gender;
 
20、一个语句统计删除和未删除的人数：
 select isdelete,count(*) from students group by isdelete;
 
21、查询男生总人数
方法一：使用where
select gender,count(*) from students where gender=1;
 

方式二：分组后的数据筛选
select gender,count(*) from students group by gender having gender=1;
 
22、查询未删除男生学生信息，按学号降序：
select * from students where gender=1 and isdelete=0 order by id desc;
 
23、查询未删除科目信息，按名称升序：
select * from subjects where isdelete=0 order by title;
 
24、查询学生表，如果每页5条数据，页数从1开始
请写出如下
第一页的SQL：

select * from students limit 0,5;
 

第二页的SQL：
select * from students limit 5,5;
 
第三页的SQL：
  select * from students limit 10,5;
 

25、在创建scores表时直接创建约束，并写出sql语句

测试插入数据：

正确数据：insert into scores values(0,90.9,1,2),(0,91,1,3),(0,92.9,1,4);
 
不合法的数据：
insert into scores values(0,99.9,2,2);
 
26、查询每个学生每个科目的分数
姓名  科目   成绩

郭靖   python  99

使用三种写法
select students.name,subjects.title,scores.score from scores
inner join students on scores.stuid=students.id
inner join subjects on scores.subid=subjects.id;
  
select students.name,subjects.title,scores.score from students
inner join scores on scores.stuid=students.id
inner join subjects on scores.subid=subjects.id;
  
select students.name,subjects.title,scores.score from subjects
inner join scores on scores.subid=subjects.id
inner join students on scores.stuid=students.id;
 

27、什么是左连接(left join)，并且举例说明？
表A与表B进行匹配，外加表A的数据
select * from students left join scores on students.id = scores.stuid;
 
28、 什么是右连接(right join )，并且举例说明？
表A与表B进行匹配，外加表B的数据
select * from scores right join students on students.id = scores.stuid;
 
29、查询学生的姓名、平均分有两种做法：1根据姓名;2.根据id分组；
1.
select students.name,avg(scores.score) from scores
inner join students on scores.stuid=students.id
group by students.name;
 
select students.name,avg(scores.score) from scores
inner join students on scores.stuid=students.id
group by students.id;
 
30、查询男生的姓名、总分
select students.name,sum(scores.score) from scores
inner join students on scores.stuid=students.id
where students.gender=1
group by students.name;
 

31、查询未删除科目的名称、平均分、最高分：
select subjects.title,avg(scores.score),max(scores.score) from scores
inner join subjects on scores.subid=subjects.id
where subjects.isdelete=0
group by subjects.title;
 
